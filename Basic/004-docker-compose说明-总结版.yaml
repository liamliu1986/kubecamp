# build，在生产实践中，基本上使用不到的，因为镜像的构建都是在持续集成过程中完成的
version: "3.8"
services: 
  appname1:
    build: ./dir
    image: appname1:tag
  appname2:
    build: 
      context: ./dir   # 指定构建path，应包含dockerfile，或者一个git repo的url
      dockerfile: some-dockerfile # 用以替换context目录下的dockerfile
      args: 
        arg1: value   # 用以指定构建image时的环境变量，也可以以list形式传递变量如"- arg1=value"，在dockerfile中需要声明方可使用这些引
      labels:                   # 同样支持字典和列表的形式
        com.org.aaa: somestring
        com.org.bbb: somestring
      shm_size: '2gb' # 使用/dev/shm的配额限制，该设备在内存中
    

# cap_add,cap_drop
version: "3.8"
services: 
  appname:
    cap_add:    # man 7 capabilities查看所有cap权限，添加或删除container的权限
    - ALL
    cap_drop: 
    - NET_ADMIN
    - SYS_ADMIN


# command
version: "3.8"
services: 
  appname:
    command: ["sleep", "30"] or sleep 30    # 覆盖镜像default command


# configs
## 短语法
version: "3.8"
services:
  redis:
    image: redis:latest
    deploy:
      replicas: 1
    configs:
      - my_config
      - my_other_config
configs:
  my_config:
    file: ./my_config.txt
  my_other_config:
    external: true

## 长语法
version: "3.8"
services:
  redis:
    image: redis:latest
    deploy:
      replicas: 1
    configs:
      - source: my_config
        target: /redis_config
        uid: '103'
        gid: '103'
        mode: 0440
configs:
  my_config:
    file: ./my_config.txt
  my_other_config:
    external: true

# depends_on, 用以指定启动顺序
version: "3.8"
services:
  web:
    build: .
    depends_on:
      - db
      - redis
  redis:
    image: redis
  db:
    image: postgres


# deploy， 定义运行service相关的参数

## endpoint_mode，指定服务发现模式vip/dnsrr
version: "3.8"
services:
  wordpress:
    image: wordpress
    ports:
      - "8080:80"
    networks:
      - overlay
    deploy:
      mode: replicated
      replicas: 2
      endpoint_mode: vip

## labels，指定services labels只在services上标记，container上没有
version: "3.8"
services:
  web:
    image: web
    labels:
      com.example.description: "This label will appear on all containers for the web service"

## mode, 指定service类型global还是replicated
version: "3.8"
services:
  worker:
    image: dockersamples/examplevotingapp_worker
    deploy:
      mode: global

## placement，自定义调度规则
version: "3.8"
services:
  db:
    image: postgres
    deploy:
      placement:
        constraints:
          - "node.role==manager"
          - "engine.labels.operatingsystem==ubuntu 18.04"
        preferences:
          - spread: node.labels.zone


## max_replicas_per_node，每个节点最大副本数
version: "3.8"
services:
  worker:
    image: dockersamples/examplevotingapp_worker
    networks:
      - frontend
      - backend
    deploy:
      mode: replicated
      replicas: 6
      placement:
        max_replicas_per_node: 1

## replicas，指定services副本数
version: "3.8"
services:
  worker:
    image: dockersamples/examplevotingapp_worker
    networks:
      - frontend
      - backend
    deploy:
      mode: replicated
      replicas: 6

## resources，资源限制
version: "3.8"
services:
  redis:
    image: redis:alpine
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 50M
        reservations:
          cpus: '0.25'
          memory: 20M

## restart_policy
version: "3.8"
services:
  redis:
    image: redis:alpine
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s


## update_config/rollback_config, parallelism,delay,failure_action,monitor,max_failure_ratio,order(start-first/stop-first)
version: "3.8"
services:
  vote:
    image: dockersamples/examplevotingapp_vote:before
    depends_on:
      - redis
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
        delay: 10s
        order: stop-first

# devices
devices:
  - "/dev/ttyUSB0:/dev/ttyUSB0"

# dns
dns: 8.8.8.8
dns_search: example.com
## or 
dns:
  - 8.8.8.8
  - 9.9.9.9

dns_search:
  - dc1.example.com
  - dc2.example.com


# entrypoint
entrypoint: /code/entrypoint.sh

# env_file
env_file:
  - ./common.env
  - ./apps/web.env
  - /opt/runtime_opts.env


# environment
environment:
  - RACK_ENV=development
  - SHOW=true
  - SESSION_SECRET


# expose
expose:
  - "3000"
  - "8000"

# healthcheck
healthcheck:
  test: ["CMD", "curl", "-f", "http://localhost"]
  interval: 1m30s
  timeout: 10s
  retries: 3
  start_period: 40s

# image指定服务启动镜像


# logging 
version: "3.8"
services:
  some-service:
    image: some-service
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

# network
## aliases
version: "3.8"

services:
  web:
    image: "nginx:alpine"
    networks:
      - new

  worker:
    image: "my-worker-image:latest"
    networks:
      - legacy

  db:
    image: mysql
    networks:
      new:
        aliases:
          - database
      legacy:
        aliases:
          - mysql

networks:
  new:
  legacy:

## ipv4_address,ipv6_address
version: "3.8"

services:
  app:
    image: nginx:alpine
    networks:
      app_net:
        ipv4_address: 172.16.238.10
        ipv6_address: 2001:3984:3989::10

networks:
  app_net:
    ipam:
      driver: default
      config:
        - subnet: "172.16.238.0/24"
        - subnet: "2001:3984:3989::/64"


# ports
## 短语法
ports:
  - "3000"
  - "3000-3005"
  - "8000:8000"
  - "9090-9091:8080-8081"
  - "49100:22"
  - "127.0.0.1:8001:8001"
  - "127.0.0.1:5000-5010:5000-5010"
  - "6060:6060/udp"
  - "12400-12500:1240"

## 长语法
ports:
  - target: 80
    published: 8080
    protocol: tcp
    mode: host/ingress

# restart
restart: always/on-failure/unless-stopped


# secrets
## 短语法
version: "3.8"
services:
  redis:
    image: redis:latest
    deploy:
      replicas: 1
    secrets:
      - my_secret
      - my_other_secret
secrets:
  my_secret:
    file: ./my_secret.txt
  my_other_secret:
    external: true

## 长语法
version: "3.8"
services:
  redis:
    image: redis:latest
    deploy:
      replicas: 1
    secrets:
      - source: my_secret
        target: redis_secret
        uid: '103'
        gid: '103'
        mode: 0440
secrets:
  my_secret:
    file: ./my_secret.txt
  my_other_secret:
    external: true

# sysctls
sysctls:
  net.core.somaxconn: 1024
  net.ipv4.tcp_syncookies: 0

# ulimits
ulimits:
  nproc: 65535
  nofile:
    soft: 20000
    hard: 40000

# volumes
version: "3.8"
services:
  web:
    image: nginx:alpine
    volumes:
      - type: volume
        source: mydata
        target: /data
        volume:
          nocopy: true
      - type: bind
        source: ./static
        target: /opt/app/static

  db:
    image: postgres:latest
    volumes:
      - "/var/run/postgres/postgres.sock:/var/run/postgres/postgres.sock"
      - "dbdata:/var/lib/postgresql/data"

volumes:
  mydata:
  dbdata:



# 一级生命network,volumes

volumes:
  driver: 
  driver_opts: 
  external: 
  name: 


networks：
  driver:
  driver_opts: 
  attachable:
  enable_ipv6:
  ipam:

  internal:
  external:
  name: