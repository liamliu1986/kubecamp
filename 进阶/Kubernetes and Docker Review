1.Kubernetes部署（实验环境，single node）

    kubernetes复习：

        docker：
            container：
                容器技术其实并不是一项新技术，但在其发展过程中停滞了一段时间。容器技术的发展伴随着计算机硬件、软件架构及计算机工程效能同步发展。
                
                计算机硬件：
                    小型机/专用机 --> X86架构 --> 虚拟化 --> container --> kubernetes 

                软件架构：
                    单体应用 --> 垂直拆分(分层结构) --> SOA --> 微服务

                工程效能：
                    Lean Manufacturing --> Agile --> DevOps --> AIOps

                
                虚拟化和容器化的区别：
                    
                    虚拟化：独立虚拟内核  
                    容器化：共享内核，更小，更快，更灵活


                核心机制：namespace，cgroups,AUFS



                lxc --> go封装 --> docker --> kubernetes


                image: 
                    bootfs + rootfs + layers
                    readonly and writealbe 

                network: 
                    bridge
                    host
                    Overlay
                    macvaln
                    （PPT）

                volume: 
                    volume      平台资源
                    bindmount   非平台资源，不可通过volume进行管理

                跨节点容器集群：
                    docker swarm 

                    service     副本集

                    路由网格（PPT）

                    docker stack:
                        完成某一功能的一组services 

        kubernetes：

            容器编排：
                混乱的容器 --> kubernetes --> 井然有序
                目前已经成为容器编排的行业标准。

            产生原因：
                IaC，自动化，服务自治理，大规模编排快速环境构建，微服务需求

            场景：
                成熟的开发模式，成熟的持续集成管理，成熟的发布流程，成熟的产品价值流

            使用：
                原生kubernetes，Rancher--Kubernetes容器云平台，敏捷开发，DevOps实践

            （PPT）

            kubernetes优势：

                服务发现和负载均衡              kube-proxy

                持久化存储管理                 PV and PVC

                自动部署与回滚                 Depoloyment

                自动资源分配和调度              Kube-Scheduler

                自我修复                      rc 

                密钥和配置管理                 secret configmap

                大规模服务编排                 helm,yaml

                自动伸缩                      autoscale

            (PPT)

            核心组件：
                api-server 

                kubelet 

                kube-proxy 

                kube-scheduler

                controller manager

                etcdv3

                cni 


            资源：
                network policy  

                pod

                RC  

                Deployment  

                StatefulSet  

                DaemonSet 

                Job

                CronJob 

                Service 

                Ingress 

                volumes

                pv 

                pvc

        高可用集群部署：

            基于base环境，docker已经部署完成。

            部署：    
                基本要求:
                    关闭selinux（非必须）
                    关闭防火墙（生产不推荐）
                    修改hosts文件
                    关闭swap（必须）
                        echo "swapoff -a" >> /etc/profile && source /etc/profile
                    修改内核参数（必须）
                    docker部署完成（必须）
                    ipvsadm安装，keepalived安装（本次部署使用ipvs）
                        ipvs vs iptables : ipvs工作在内核空间，效率更高，iptables规则随pod数量增加，效率会降低

                        yum install -y ipvsadm keepalived

                        vim /etc/sysconfig/modules/ipvs.modules

                            modprobe -- ip_vs
                            modprobe -- ip_vs_rr
                            modprobe -- ip_vs_wrr
                            modprobe -- ip_vs_sh
                            modprobe -- nf_conntrack_ipv4


                        chmod +x /etc/sysconfig/modules/ipvs.modules
                        . /etc/sysconfig/modules/ipvs.modules

                        
                        vim /etc/keepalived/keepalived.conf 

                            ! Configuration File for keepalived

                            global_defs {
                            router_id LVS_DEVEL
                            }

                            vrrp_instance VI_1 {
                                state MASTER
                                interface ens33
                                virtual_router_id 51
                                priority 100
                                advert_int 1
                                authentication {
                                    auth_type PASS
                                    auth_pass 1111
                                }
                                virtual_ipaddress {
                                    10.10.100.10
                                }
                            }

                            virtual_server 10.10.100.10 6443 {
                                delay_loop 6
                                lb_algo rr
                                lb_kind DR
                                persistence_timeout 50
                                protocol TCP

                                real_server 10.10.100.130 6443 {
                                    weight 1
                                    TCP_CHECK {
                                        connect_timeout 5
                                        nb_get_retry 3
                                        delay_before_retry 3
                                        connect_port 6443
                                    }
                                }
                                real_server 10.10.100.131 6443 {
                                    weight 1
                                    TCP_CHECK {
                                        connect_timeout 5
                                        nb_get_retry 3
                                        delay_before_retry 3
                                        connect_port 6443
                                    }
                                }
                                real_server 10.10.100.132 6443 {
                                    weight 1
                                    TCP_CHECK {
                                        connect_timeout 5
                                        nb_get_retry 3
                                        delay_before_retry 3
                                        connect_port 6443
                                    }
                                }
                            }
                
                kubeadm:

                    编写kube-admin.yaml
                        apiVersion: kubeadm.k8s.io/v1beta2
                        kind: ClusterConfiguration
                        kubernetesVersion: 1.21.0
                        imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers
                        clusterName: kubecamp
                        controlPlaneEndpoint: "10.10.100.10:6443"
                        networking:
                            dnsDomain: kubecmap.com
                            podSubnet: 192.168.150.0/24
                            serviceSubnet: 192.168.151.0/24
                        dns:
                            type: CoreDNS
                            imageRepository: coredns
                            imageTag: 1.8.0

                        ---
                        apiVersion: kubeproxy.config.k8s.io/v1alpha1
                        kind: KubeProxyConfiguration
                        mode: ipvs

                    kubeadm init --config=kubeadm-config.yaml --upload-certs     

                部署完成
                
           



       
